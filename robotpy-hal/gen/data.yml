---

strip_prefixes:
- HAL_

functions:

  # Accelerometer.h
  HAL_SetAccelerometerActive:
  HAL_SetAccelerometerRange:
  HAL_GetAccelerometerX:
  HAL_GetAccelerometerY:
  HAL_GetAccelerometerZ:

  # AnalogAccumulator
  HAL_IsAccumulatorChannel:
  HAL_InitAccumulator:
  HAL_ResetAccumulator:
  HAL_SetAccumulatorCenter:
  HAL_SetAccumulatorDeadband:
  HAL_GetAccumulatorValue:
  HAL_GetAccumulatorCount:
  HAL_GetAccumulatorOutput:

  # AnalogGyro.h
  HAL_InitializeAnalogGyro:
  HAL_SetupAnalogGyro:
  HAL_FreeAnalogGyro:
  HAL_SetAnalogGyroParameters:
  HAL_SetAnalogGyroVoltsPerDegreePerSecond:
  HAL_ResetAnalogGyro:
  HAL_CalibrateAnalogGyro:
  HAL_SetAnalogGyroDeadband:
  HAL_GetAnalogGyroAngle:
  HAL_GetAnalogGyroRate:
  HAL_GetAnalogGyroOffset:
  HAL_GetAnalogGyroCenter:

  # AnalogInput.h
  HAL_InitializeAnalogInputPort:
  HAL_FreeAnalogInputPort:
  HAL_CheckAnalogModule:
  HAL_CheckAnalogInputChannel:
  HAL_SetAnalogSampleRate:
  HAL_GetAnalogSampleRate:
  HAL_SetAnalogAverageBits:
  HAL_GetAnalogAverageBits:
  HAL_SetAnalogOversampleBits:
  HAL_GetAnalogOversampleBits:
  HAL_GetAnalogValue:
  HAL_GetAnalogAverageValue:
  HAL_GetAnalogVoltsToValue:
  HAL_GetAnalogVoltage:
  HAL_GetAnalogAverageVoltage:
  HAL_GetAnalogLSBWeight:
  HAL_GetAnalogOffset:

  # AnalogOutput.h
  HAL_InitializeAnalogOutputPort:
  HAL_FreeAnalogOutputPort:
  HAL_SetAnalogOutput:
  HAL_GetAnalogOutput:
  HAL_CheckAnalogOutputChannel:

  # AnalogTrigger.h
  HAL_InitializeAnalogTrigger:
  HAL_CleanAnalogTrigger:
  HAL_SetAnalogTriggerLimitsRaw:
  HAL_SetAnalogTriggerLimitsVoltage:
  HAL_SetAnalogTriggerAveraged:
  HAL_SetAnalogTriggerFiltered:
  HAL_GetAnalogTriggerInWindow:
  HAL_GetAnalogTriggerTriggerState:
  HAL_GetAnalogTriggerOutput:

  # CANAPI.h
  HAL_InitializeCAN:
  HAL_CleanCAN:
  HAL_WriteCANPacket:
    buffers:
    - { type: in, src: data, len: length }
  HAL_WriteCANPacketRepeating:
    buffers:
    - { type: in, src: data, len: length }
  HAL_StopCANPacketRepeating:
  HAL_ReadCANPacketNew:
    buffers:
    - { type: out, src: data, len: length, minsz: 8 }
  HAL_ReadCANPacketLatest:
    buffers:
    - { type: out, src: data, len: length, minsz: 8 }
  HAL_ReadCANPacketTimeout:
    buffers:
    - { type: out, src: data, len: length, minsz: 8 }
  HAL_ReadCANPeriodicPacket:
    buffers:
    - { type: out, src: data, len: length, minsz: 8 }

  # CAN.h
  HAL_CAN_SendMessage:
    buffers:
    - { type: in, src: data, len: dataSize }
  HAL_CAN_ReceiveMessage:
    buffers:
    - { type: out, src: data, len: dataSize, minsz: 8 }
  HAL_CAN_OpenStreamSession:
  HAL_CAN_CloseStreamSession:
  HAL_CAN_ReadStreamSession:
    ignore: true # TODO: an array of messages
  HAL_CAN_GetCANStatus:

  # Compressor.h
  HAL_InitializeCompressor:
  HAL_CheckCompressorModule:
  HAL_GetCompressor:
  HAL_SetCompressorClosedLoopControl:
  HAL_GetCompressorClosedLoopControl:
  HAL_GetCompressorPressureSwitch:
  HAL_GetCompressorCurrent:
  HAL_GetCompressorCurrentTooHighFault:
  HAL_GetCompressorCurrentTooHighStickyFault:
  HAL_GetCompressorShortedStickyFault:
  HAL_GetCompressorShortedFault:
  HAL_GetCompressorNotConnectedStickyFault:
  HAL_GetCompressorNotConnectedFault:

  # Constants.h
  HAL_GetSystemClockTicksPerMicrosecond:

  # Counter.h
  HAL_InitializeCounter:
  HAL_FreeCounter:
  HAL_SetCounterAverageSize:
  HAL_SetCounterUpSource:
  HAL_SetCounterUpSourceEdge:
  HAL_ClearCounterUpSource:
  HAL_SetCounterDownSource:
  HAL_SetCounterDownSourceEdge:
  HAL_ClearCounterDownSource:
  HAL_SetCounterUpDownMode:
  HAL_SetCounterExternalDirectionMode:
  HAL_SetCounterSemiPeriodMode:
  HAL_SetCounterPulseLengthMode:
  HAL_GetCounterSamplesToAverage:
  HAL_SetCounterSamplesToAverage:
  HAL_ResetCounter:
  HAL_GetCounter:
  HAL_GetCounterPeriod:
  HAL_SetCounterMaxPeriod:
  HAL_SetCounterUpdateWhenEmpty:
  HAL_GetCounterStopped:
  HAL_GetCounterDirection:
  HAL_SetCounterReverseDirection:

  # DIO.h
  HAL_InitializeDIOPort:
  HAL_CheckDIOChannel:
  HAL_FreeDIOPort:
  HAL_AllocateDigitalPWM:
  HAL_FreeDigitalPWM:
  HAL_SetDigitalPWMRate:
  HAL_SetDigitalPWMDutyCycle:
  HAL_SetDigitalPWMOutputChannel:
  HAL_SetDIO:
  HAL_SetDIODirection:
  HAL_GetDIO:
  HAL_GetDIODirection:
  HAL_Pulse:
  HAL_IsPulsing:
  HAL_IsAnyPulsing:
  HAL_SetFilterSelect:
  HAL_GetFilterSelect:
  HAL_SetFilterPeriod:
  HAL_GetFilterPeriod:

  # DriverStation.h
  HAL_SendError:
  HAL_GetControlWord:
  HAL_GetAllianceStation:
  HAL_GetJoystickAxes:
  HAL_GetJoystickPOVs:
  HAL_GetJoystickButtons:
  HAL_GetJoystickDescriptor:
  HAL_GetJoystickIsXbox:
  HAL_GetJoystickType:
  HAL_GetJoystickName:
    cpp_code: |
      [](int32_t joystickNum) {
        auto name = HAL_GetJoystickName(joystickNum);
        std::string sname(name);
        HAL_FreeJoystickName(name);
        return sname;
      }
  HAL_FreeJoystickName:
    ignore: true
  HAL_GetJoystickAxisType:
  HAL_SetJoystickOutputs:
  HAL_GetMatchTime:
  HAL_GetMatchInfo:
  HAL_ReleaseDSMutex:
  HAL_IsNewControlData:
  HAL_WaitForDSData:
  HAL_WaitForDSDataTimeout:
  HAL_InitializeDriverStation:
  HAL_ObserveUserProgramStarting:
  HAL_ObserveUserProgramDisabled:
  HAL_ObserveUserProgramAutonomous:
  HAL_ObserveUserProgramTeleop:
  HAL_ObserveUserProgramTest:
  
  # Encoder.h
  HAL_InitializeEncoder:
  HAL_FreeEncoder:
  HAL_GetEncoder:
  HAL_GetEncoderRaw:
  HAL_GetEncoderEncodingScale:
  HAL_ResetEncoder:
  HAL_GetEncoderPeriod:
  HAL_SetEncoderMaxPeriod:
  HAL_GetEncoderStopped:
  HAL_GetEncoderDirection:
  HAL_GetEncoderDistance:
  HAL_GetEncoderRate:
  HAL_SetEncoderMinRate:
  HAL_SetEncoderDistancePerPulse:
  HAL_SetEncoderReverseDirection:
  HAL_SetEncoderSamplesToAverage:
  HAL_GetEncoderSamplesToAverage:
  HAL_SetEncoderIndexSource:
  HAL_GetEncoderFPGAIndex:
  HAL_GetEncoderDecodingScaleFactor:
  HAL_GetEncoderDistancePerPulse:
  HAL_GetEncoderEncodingType:

  # Extensions.h
  HAL_LoadOneExtension:
  HAL_LoadExtensions:
  
  # HALBase.h
  HAL_GetErrorMessage:
  HAL_GetFPGAVersion:
  HAL_GetFPGARevision:
  HAL_GetRuntimeType:
  HAL_GetFPGAButton:
  HAL_GetSystemActive:
  HAL_GetBrownedOut:
  HAL_BaseInitialize:
    # not implemented in simulation, and not needed anyways
    ignore: true
  HAL_GetPort:
  HAL_GetPortWithModule:
  HAL_GetFPGATime:
  HAL_Initialize:
  HAL_Report:
  
  # I2C.h
  HAL_InitializeI2C:
  HAL_TransactionI2C:
    buffers:
    - { type: in, src: dataToSend, len: sendSize }
    - { type: out, src: dataReceived, len: receiveSize }
  HAL_WriteI2C:
    buffers:
    - { type: in, src: dataToSend, len: sendSize }
  HAL_ReadI2C:
    buffers:
    - { type: out, src: buffer, len: count }
  HAL_CloseI2C:

  # Interrupts.h
  HAL_InitializeInterrupts:
  HAL_CleanInterrupts:
  HAL_WaitForInterrupt:
  HAL_EnableInterrupts:
  HAL_DisableInterrupts:
  HAL_ReadInterruptRisingTimestamp:
  HAL_ReadInterruptFallingTimestamp:
  HAL_RequestInterrupts:
  HAL_AttachInterruptHandler:
    ignore: true
  HAL_AttachInterruptHandlerThreaded:
    ignore: true
  HAL_SetInterruptUpSourceEdge:

  # Notifier.h
  HAL_InitializeNotifier:
  HAL_StopNotifier:
  HAL_CleanNotifier:
  HAL_UpdateNotifierAlarm:
  HAL_CancelNotifierAlarm:
  HAL_WaitForNotifierAlarm:
  
  # PDP.h
  HAL_InitializePDP:
  HAL_CleanPDP:
  HAL_CheckPDPChannel:
  HAL_CheckPDPModule:
  HAL_GetPDPTemperature:
  HAL_GetPDPVoltage:
  HAL_GetPDPChannelCurrent:
  HAL_GetPDPTotalCurrent:
  HAL_GetPDPTotalPower:
  HAL_GetPDPTotalEnergy:
  HAL_ResetPDPTotalEnergy:
  HAL_ClearPDPStickyFaults:
  
  # Ports.h
  HAL_GetNumAccumulators:
  HAL_GetNumAnalogTriggers:
  HAL_GetNumAnalogInputs:
  HAL_GetNumAnalogOutputs:
  HAL_GetNumCounters:
  HAL_GetNumDigitalHeaders:
  HAL_GetNumPWMHeaders:
  HAL_GetNumDigitalChannels:
  HAL_GetNumPWMChannels:
  HAL_GetNumDigitalPWMOutputs:
  HAL_GetNumEncoders:
  HAL_GetNumInterrupts:
  HAL_GetNumRelayChannels:
  HAL_GetNumRelayHeaders:
  HAL_GetNumPCMModules:
  HAL_GetNumSolenoidChannels:
  HAL_GetNumPDPModules:
  HAL_GetNumPDPChannels:
  
  # Power.h
  HAL_GetVinVoltage:
  HAL_GetVinCurrent:
  HAL_GetUserVoltage6V:
  HAL_GetUserCurrent6V:
  HAL_GetUserActive6V:
  HAL_GetUserCurrentFaults6V:
  HAL_GetUserVoltage5V:
  HAL_GetUserCurrent5V:
  HAL_GetUserActive5V:
  HAL_GetUserCurrentFaults5V:
  HAL_GetUserVoltage3V3:
  HAL_GetUserCurrent3V3:
  HAL_GetUserActive3V3:
  HAL_GetUserCurrentFaults3V3:
  
  # PWM.h
  HAL_InitializePWMPort:
  HAL_FreePWMPort:
  HAL_CheckPWMChannel:
  HAL_SetPWMConfig:
  HAL_SetPWMConfigRaw:
  HAL_GetPWMConfigRaw:
  HAL_SetPWMEliminateDeadband:
  HAL_GetPWMEliminateDeadband:
  HAL_SetPWMRaw:
  HAL_SetPWMSpeed:
  HAL_SetPWMPosition:
  HAL_SetPWMDisabled:
  HAL_GetPWMRaw:
  HAL_GetPWMSpeed:
  HAL_GetPWMPosition:
  HAL_LatchPWMZero:
  HAL_SetPWMPeriodScale:
  HAL_GetPWMLoopTiming:
  HAL_GetPWMCycleStartTime:
  
  # Relay.h
  HAL_InitializeRelayPort:
  HAL_FreeRelayPort:
  HAL_CheckRelayChannel:
  HAL_SetRelay:
  HAL_GetRelay:
  
  # SerialPort.h
  HAL_InitializeSerialPort:
  HAL_InitializeSerialPortDirect:
  HAL_SetSerialBaudRate:
  HAL_SetSerialDataBits:
  HAL_SetSerialParity:
  HAL_SetSerialStopBits:
  HAL_SetSerialWriteMode:
  HAL_SetSerialFlowControl:
  HAL_SetSerialTimeout:
  HAL_EnableSerialTermination:
  HAL_DisableSerialTermination:
  HAL_SetSerialReadBufferSize:
  HAL_SetSerialWriteBufferSize:
  HAL_GetSerialBytesReceived:
  HAL_ReadSerial:
    buffers:
    - { type: out, src: buffer, len: count }
  HAL_WriteSerial:
    buffers:
    - { type: in, src: buffer, len: count }
  HAL_FlushSerial:
  HAL_ClearSerial:
  HAL_CloseSerial:

  # Solenoid.h
  HAL_InitializeSolenoidPort:
  HAL_FreeSolenoidPort:
  HAL_CheckSolenoidModule:
  HAL_CheckSolenoidChannel:
  HAL_GetSolenoid:
  HAL_GetAllSolenoids:
  HAL_SetSolenoid:
  HAL_SetAllSolenoids:
    ignore: true # not implemented in simulation
  HAL_GetPCMSolenoidBlackList:
  HAL_GetPCMSolenoidVoltageStickyFault:
  HAL_GetPCMSolenoidVoltageFault:
  HAL_ClearAllPCMStickyFaults:
  HAL_SetOneShotDuration:
  HAL_FireOneShot:
  
  # SPI.h
  HAL_InitializeSPI:
  HAL_TransactionSPI:
    buffers:
    - { type: in, src: dataToSend, len: size }
    - { type: out, src: dataReceived, len: size }
    # TODO: dataToSend buffer must be at least as long as dataReceived buffer
  HAL_WriteSPI:
    buffers:
    - { type: in, src: dataToSend, len: sendSize }
  HAL_ReadSPI:
    buffers:
    - { type: out, src: buffer, len: count }
  HAL_CloseSPI:
  HAL_SetSPISpeed:
  HAL_SetSPIOpts:
  HAL_SetSPIChipSelectActiveHigh:
  HAL_SetSPIChipSelectActiveLow:
  HAL_GetSPIHandle:
  HAL_SetSPIHandle:
  HAL_InitSPIAuto:
  HAL_FreeSPIAuto:
  HAL_StartSPIAutoRate:
  HAL_StartSPIAutoTrigger:
  HAL_StopSPIAuto:
  HAL_SetSPIAutoTransmitData:
    buffers:
    - { type: in, src: dataToSend, len: dataSize }
  HAL_ForceSPIAutoRead:
  HAL_ReadSPIAutoReceivedData:
    buffers:
    - { type: out, src: buffer, len: numToRead }
  HAL_GetSPIAutoDroppedCount:

  # Threads.h
  HAL_GetThreadPriority:
  HAL_GetCurrentThreadPriority:
  HAL_SetThreadPriority:
    # no way to get native handle
    ignore: true
  HAL_SetCurrentThreadPriority:

classes:
  HAL_ControlWord:
  HAL_JoystickAxes:
  HAL_JoystickPOVs:
  HAL_JoystickButtons:
  HAL_JoystickDescriptor:
  HAL_MatchInfo:

enums:
  HAL_AnalogTriggerType:
    value_prefix: HAL_Trigger
  HAL_CANDeviceType:
    value_prefix: HAL_CAN_Dev
  HAL_CANManufacturer:
    value_prefix: HAL_CAN_Man
  HAL_Counter_Mode:
    value_prefix: HAL_Counter
  HAL_MatchType:
    value_prefix: HAL_kMatchType
  HAL_EncoderIndexingType:
    value_prefix: HAL
  HAL_EncoderEncodingType:
    value_prefix: HAL
  HAL_I2CPort:
    value_prefix: HAL_I2C
  HAL_SPIPort:
    value_prefix: HAL_SPI
